#pragma once

#include <Eigen/Dense>

void constructM_N2(const Eigen::Matrix<double, 6, 6> &A,
                   const Eigen::Vector3d &u, Eigen::MatrixXd &M) {
    M(0, 0) = u(0);
    M(0, 1) = u(1);
    M(0, 2) = u(2);
    M(1, 1) = u(0);
    M(1, 4) = u(2);
    M(1, 7) = u(1);
    M(2, 2) = u(0);
    M(2, 4) = u(1);
    M(2, 8) = u(2);
    M(3, 3) = u(0);
    M(3, 9) = u(1);
    M(3, 15) = u(2);
    M(4, 4) = u(0);
    M(4, 5) = u(2);
    M(4, 6) = u(1);
    M(5, 3) = u(1);
    M(5, 5) = u(0);
    M(5, 16) = u(2);
    M(6, 3) = u(2);
    M(6, 6) = u(0);
    M(6, 10) = u(1);
    M(7, 6) = u(2);
    M(7, 7) = u(0);
    M(7, 12) = u(1);
    M(8, 5) = u(1);
    M(8, 8) = u(0);
    M(8, 18) = u(2);
    M(9, 3) = 2 * A(0, 3) + 4 * A(3, 0);
    M(9, 5) = 2 * A(3, 3) + 4 * A(5, 0);
    M(9, 8) = 2 * A(5, 3);
    M(9, 9) = 4 * A(0, 0);
    M(9, 15) = 2 * A(0, 2) + 4 * A(2, 0);
    M(9, 16) = 2 * A(2, 3) + 2 * A(3, 2) + 4 * A(4, 0);
    M(9, 17) = 4 * A(1, 0) + 2 * A(2, 2);
    M(9, 18) = 2 * A(4, 3) + 2 * A(5, 2);
    M(9, 19) = 2 * A(1, 3) + 2 * A(4, 2);
    M(9, 20) = 2 * A(1, 2);
    M(10, 2) = 2 * A(5, 3);
    M(10, 3) = 2 * A(0, 2) + 4 * A(2, 0);
    M(10, 4) = 2 * A(3, 3) + 4 * A(5, 0);
    M(10, 5) = 2 * A(2, 3) + 2 * A(3, 2) + 4 * A(4, 0);
    M(10, 6) = 2 * A(0, 3) + 4 * A(3, 0);
    M(10, 8) = 2 * A(4, 3) + 2 * A(5, 2);
    M(10, 10) = 4 * A(0, 0);
    M(10, 16) = 4 * A(1, 0) + 2 * A(2, 2);
    M(10, 18) = 2 * A(1, 3) + 2 * A(4, 2);
    M(10, 19) = 2 * A(1, 2);
    M(11, 3) = 2 * A(2, 3) + 2 * A(3, 2) + 4 * A(4, 0);
    M(11, 4) = 2 * A(5, 3);
    M(11, 5) = 2 * A(4, 3) + 2 * A(5, 2);
    M(11, 6) = 2 * A(3, 3) + 4 * A(5, 0);
    M(11, 9) = 2 * A(0, 2) + 4 * A(2, 0);
    M(11, 10) = 2 * A(0, 3) + 4 * A(3, 0);
    M(11, 11) = 4 * A(0, 0);
    M(11, 15) = 4 * A(1, 0) + 2 * A(2, 2);
    M(11, 16) = 2 * A(1, 3) + 2 * A(4, 2);
    M(11, 17) = 2 * A(1, 2);
    M(12, 0) = 2 * A(5, 3);
    M(12, 1) = 2 * A(3, 3) + 4 * A(5, 0);
    M(12, 2) = 2 * A(4, 3) + 2 * A(5, 2);
    M(12, 4) = 2 * A(2, 3) + 2 * A(3, 2) + 4 * A(4, 0);
    M(12, 5) = 4 * A(1, 0) + 2 * A(2, 2);
    M(12, 6) = 2 * A(0, 2) + 4 * A(2, 0);
    M(12, 7) = 2 * A(0, 3) + 4 * A(3, 0);
    M(12, 8) = 2 * A(1, 3) + 2 * A(4, 2);
    M(12, 12) = 4 * A(0, 0);
    M(12, 18) = 2 * A(1, 2);
    M(13, 1) = 2 * A(5, 3);
    M(13, 3) = 4 * A(1, 0) + 2 * A(2, 2);
    M(13, 4) = 2 * A(4, 3) + 2 * A(5, 2);
    M(13, 5) = 2 * A(1, 3) + 2 * A(4, 2);
    M(13, 6) = 2 * A(2, 3) + 2 * A(3, 2) + 4 * A(4, 0);
    M(13, 7) = 2 * A(3, 3) + 4 * A(5, 0);
    M(13, 10) = 2 * A(0, 2) + 4 * A(2, 0);
    M(13, 12) = 2 * A(0, 3) + 4 * A(3, 0);
    M(13, 13) = 4 * A(0, 0);
    M(13, 16) = 2 * A(1, 2);
    M(14, 3) = 2 * A(1, 3) + 2 * A(4, 2);
    M(14, 6) = 2 * A(4, 3) + 2 * A(5, 2);
    M(14, 7) = 2 * A(5, 3);
    M(14, 9) = 4 * A(1, 0) + 2 * A(2, 2);
    M(14, 10) = 2 * A(2, 3) + 2 * A(3, 2) + 4 * A(4, 0);
    M(14, 11) = 2 * A(0, 2) + 4 * A(2, 0);
    M(14, 12) = 2 * A(3, 3) + 4 * A(5, 0);
    M(14, 13) = 2 * A(0, 3) + 4 * A(3, 0);
    M(14, 14) = 4 * A(0, 0);
    M(14, 15) = 2 * A(1, 2);
    M(15, 3) = 2 * A(1, 4) + 4 * A(4, 1);
    M(15, 6) = 2 * A(4, 4) + 4 * A(5, 1);
    M(15, 7) = 2 * A(5, 4);
    M(15, 9) = 2 * A(1, 2) + 4 * A(2, 1);
    M(15, 10) = 2 * A(2, 4) + 4 * A(3, 1) + 2 * A(4, 2);
    M(15, 11) = 4 * A(0, 1) + 2 * A(2, 2);
    M(15, 12) = 2 * A(3, 4) + 2 * A(5, 2);
    M(15, 13) = 2 * A(0, 4) + 2 * A(3, 2);
    M(15, 14) = 2 * A(0, 2);
    M(15, 15) = 4 * A(1, 1);
    M(16, 1) = 2 * A(5, 4);
    M(16, 3) = 2 * A(1, 2) + 4 * A(2, 1);
    M(16, 4) = 2 * A(4, 4) + 4 * A(5, 1);
    M(16, 5) = 2 * A(1, 4) + 4 * A(4, 1);
    M(16, 6) = 2 * A(2, 4) + 4 * A(3, 1) + 2 * A(4, 2);
    M(16, 7) = 2 * A(3, 4) + 2 * A(5, 2);
    M(16, 10) = 4 * A(0, 1) + 2 * A(2, 2);
    M(16, 12) = 2 * A(0, 4) + 2 * A(3, 2);
    M(16, 13) = 2 * A(0, 2);
    M(16, 16) = 4 * A(1, 1);
    M(17, 3) = 2 * A(2, 4) + 4 * A(3, 1) + 2 * A(4, 2);
    M(17, 4) = 2 * A(5, 4);
    M(17, 5) = 2 * A(4, 4) + 4 * A(5, 1);
    M(17, 6) = 2 * A(3, 4) + 2 * A(5, 2);
    M(17, 9) = 4 * A(0, 1) + 2 * A(2, 2);
    M(17, 10) = 2 * A(0, 4) + 2 * A(3, 2);
    M(17, 11) = 2 * A(0, 2);
    M(17, 15) = 2 * A(1, 2) + 4 * A(2, 1);
    M(17, 16) = 2 * A(1, 4) + 4 * A(4, 1);
    M(17, 17) = 4 * A(1, 1);
    M(18, 0) = 2 * A(5, 4);
    M(18, 1) = 2 * A(3, 4) + 2 * A(5, 2);
    M(18, 2) = 2 * A(4, 4) + 4 * A(5, 1);
    M(18, 4) = 2 * A(2, 4) + 4 * A(3, 1) + 2 * A(4, 2);
    M(18, 5) = 2 * A(1, 2) + 4 * A(2, 1);
    M(18, 6) = 4 * A(0, 1) + 2 * A(2, 2);
    M(18, 7) = 2 * A(0, 4) + 2 * A(3, 2);
    M(18, 8) = 2 * A(1, 4) + 4 * A(4, 1);
    M(18, 12) = 2 * A(0, 2);
    M(18, 18) = 4 * A(1, 1);
    M(19, 2) = 2 * A(5, 4);
    M(19, 3) = 4 * A(0, 1) + 2 * A(2, 2);
    M(19, 4) = 2 * A(3, 4) + 2 * A(5, 2);
    M(19, 5) = 2 * A(2, 4) + 4 * A(3, 1) + 2 * A(4, 2);
    M(19, 6) = 2 * A(0, 4) + 2 * A(3, 2);
    M(19, 8) = 2 * A(4, 4) + 4 * A(5, 1);
    M(19, 10) = 2 * A(0, 2);
    M(19, 16) = 2 * A(1, 2) + 4 * A(2, 1);
    M(19, 18) = 2 * A(1, 4) + 4 * A(4, 1);
    M(19, 19) = 4 * A(1, 1);
    M(20, 3) = 2 * A(0, 4) + 2 * A(3, 2);
    M(20, 5) = 2 * A(3, 4) + 2 * A(5, 2);
    M(20, 8) = 2 * A(5, 4);
    M(20, 9) = 2 * A(0, 2);
    M(20, 15) = 4 * A(0, 1) + 2 * A(2, 2);
    M(20, 16) = 2 * A(2, 4) + 4 * A(3, 1) + 2 * A(4, 2);
    M(20, 17) = 2 * A(1, 2) + 4 * A(2, 1);
    M(20, 18) = 2 * A(4, 4) + 4 * A(5, 1);
    M(20, 19) = 2 * A(1, 4) + 4 * A(4, 1);
    M(20, 20) = 4 * A(1, 1);
}
